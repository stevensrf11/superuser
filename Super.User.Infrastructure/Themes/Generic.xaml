<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:input="clr-namespace:System.Windows.Input;assembly=PresentationCore"

                    xmlns:coll="clr-namespace:System.Collections;assembly=mscorlib"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Super.User.Infrastructure;component/Themes/Navigation/Navigation.xaml" />

        <!--<ResourceDictionary Source="{dx:UtilsResource Themes/DXPanel.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/DragIconControl.xaml}" />        
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/SearchPanel.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/WizardPageLayout.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/WizardStyles.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/Window.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/UserControl.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/WaitIndicators.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/TransferStyles.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/Popup.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/SuperTip.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/PseudoWindow.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/Buttons.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/Buttons.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/Badges.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/Badges.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/CustomTemplates.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/ThemedBorder.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/SearchPanel.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/StandardControlStyles/ScrollBar.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/DeepBlue/DragDrop.xaml}" />
        <ResourceDictionary Source="{dx:EditorsResource Themes/Generic/Generic.xaml}" />
        <ResourceDictionary Source="{dx:EditorsResource Themes/DeepBlue.xaml}" />
        <ResourceDictionary Source="{dx:BarsResource Themes/DeepBlue.xaml}" />
        <ResourceDictionary Source="{dx:DXTabControlResource Themes/DeepBlue.xaml}" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Themes/DeepBlue/CornerBox.xaml" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Themes/Generic/SplashScreen.xaml" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Themes/StandardControlStylesDeepBlue.xaml" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Themes/DisplayFormatTextControlStyles.xaml" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Mvvm.UI/Services/NotificationService/PredefinedToastNotification.xaml" />
        <ResourceDictionary Source="/DevExpress.Xpf.Core.v21.1;component/Mvvm.UI/Behaviors/EnumItemsSourceBehavior/EnumMemberInfoPresenter.xaml" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/SuperTip.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/ConditionalFormatting.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/ThemedBorder.xaml}" />
        <ResourceDictionary Source="{dx:UtilsResource Themes/Generic/DragDrop.xaml}" />-->
    </ResourceDictionary.MergedDictionaries>

    <!--<Style TargetType="{x:Type dx:GroupFrame}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=GroupBoxBorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template" Value="{DynamicResource {dxt:GroupBoxThemeKey ResourceKey=ControlTemplate}}" />
        <Setter Property="Padding" Value="12,6,12,12"/>
    </Style>

    <Style TargetType="{x:Type dx:ThemedUserControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template" Value="{DynamicResource {dxt:UserControlThemeKey ResourceKey=ControlTemplate}}" />
    </Style>



    <Style TargetType="{x:Type dx:FloatingContainerControl}">
        <Setter Property="WindowTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerWindowTemplate}}" />
        <Setter Property="AdornerTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerAdornerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}"/>
    </Style>

	<Style TargetType="{x:Type dx:FloatingWindowContainer}">
		<Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}"/>
    </Style>
	<Style TargetType="{x:Type dx:FloatingAdornerContainer}">
		<Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}"/>
	</Style>
    <Style TargetType="{x:Type dx:PopupFloatingContainer}">
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}"/>
    </Style>

	<Style x:Key="{dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerStyle}" TargetType="{x:Type dx:FloatingContainer}">
        <Setter Property="Owner" Value="{Binding Path=Owner, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Content" Value="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="FloatSize" Value="{Binding Path=FloatSize, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="FloatLocation" Value="{Binding Path=FloatLocation, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsOpen" Value="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}}" />
        <Setter Property="MinWidth" Value="{Binding Path=MinWidth, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MinHeight" Value="{Binding Path=MinHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MaxWidth" Value="{Binding Path=MaxWidth, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MaxHeight" Value="{Binding Path=MaxHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}"/>
    </Style>
    
    
    
    <Style TargetType="{x:Type dxec:DXSeparator}">
        <Setter Property="Template" Value="{DynamicResource {dxt:SeparatorThemeKey ResourceKey=ControlTemplate}}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type dx:PopupBase}">
        <Setter Property="AllowsTransparency" Value="True" />
    </Style>
    <Style TargetType="{x:Type dx:PopupBorderControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:PopupBaseThemeKey ResourceKey=BorderTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxb:BarManagerHelper.Popup).(dxcn:AppearanceOptions.HasForeground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(dxb:BarManagerHelper.Popup).(dxcn:AppearanceOptions.Foreground), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>  -->
</ResourceDictionary>